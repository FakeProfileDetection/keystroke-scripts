{
  "dataset_path": "../eda/ml-experients-without-outliers2025-05-31_143027/imputation_user/dataset_3_full_without_outliers_IL_filtered.csv",
  "early_stopping": false,
  "seeds": [42, 12345],
  "output_affix": "debug",
  "show_class_distributions": false,
  "draw_feature_importance": true,
  "debug": true,
  "use_gpu": false,
  "metadata": {
    "raw_data": "loadable_Combined_HU_HT",
    "processed_data": "processed_data-2025-05-31_140105-UbuntuSungoddess",
    "extracted_features_dir": "ml-experients-without-outliers2025-05-31_143027",
    "description": "Full dataset without outliers, filtered for IL users",
    "version": "1.0",
    "note": "This may need to be updated after running the experiment."
  },
  
    "models_to_train": [
    "RandomForest",
    "XGBoost"
  ],
  
  "experiments": [
    {"name": "S1_vs_S2_P3", "session": true, "platform": 3, "train": [1], "test": 2},
    {"name": "S1_vs_S2_All", "session": true, "platform": "all", "train": [1], "test": 2}

  ],
  
  "param_grids": {
    "randomforest": {
      "n_estimators": [50],
      "max_depth": [10]
    },
    
    "xgboost": {
      "n_estimators": [50],
      "max_depth": [6],
      "learning_rate": [0.1]
    },
    
    "catboost": {
      "iterations": [50],
      "depth": [6],
      "learning_rate": [0.1]
    },
    
    "svm": {
      "C": [1],
      "kernel": ["rbf"],
      "gamma": ["scale"]
    },
    
    "mlp": {
      "hidden_layer_sizes": [[50]],
      "activation": ["relu"],
      "solver": ["adam"],
      "alpha": [0.0001],
      "learning_rate": ["constant"],
      "batch_size": [16],
      "learning_rate_init": [0.001],
      "max_iter": [1000]
    },
    
    "naivebayes": {}
  },
   "lightgbm": {
    "n_estimators": [100],
    "max_depth": [6],
    "learning_rate": [0.05],
    "num_leaves": [31],
    "min_child_samples": [20]
},
    "extratrees": {
    "n_estimators": [50],
    "max_depth": [10],
    "criterion": ["gini"]
},
    "gradientboosting": {
    "n_estimators": [50],
    "max_depth": [3],
    "learning_rate": [0.1]
},
    "knn": {
    "n_neighbors": [5],
    "weights": ["distance"],
    "metric": ["euclidean"]
},
    "logisticregression": {
    "C": [1],
    "penalty": ["l2"],
    "solver": ["liblinear"]
}
}

